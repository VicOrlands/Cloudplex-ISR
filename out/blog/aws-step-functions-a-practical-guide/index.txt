3:I[4707,[],""]
5:I[36423,[],""]
6:I[83575,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
7:I[72972,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],""]
8:"$Sreact.suspense"
9:I[81523,["6051","static/chunks/795d4814-476d6416c8e2052d.js","1779","static/chunks/0e762574-e2250de400a4ed4b.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","3705","static/chunks/3705-b8fe6f5208fe399e.js","3978","static/chunks/3978-b267f049d115c2b8.js","1110","static/chunks/1110-de266bf53394e4db.js","1055","static/chunks/1055-c276cbff28cfad9a.js","4606","static/chunks/4606-20a0c42850a47167.js","2403","static/chunks/2403-4383a29793ac9144.js","3839","static/chunks/3839-050ccec6cac83fe9.js","1931","static/chunks/app/page-c8486484b9037db3.js"],"BailoutToCSR"]
a:I[7237,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
b:I[22207,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
c:I[75549,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
4:["slug","aws-step-functions-a-practical-guide","d"]
0:["uEu_oHx93E1n1djLkNdZ9",[[["",{"children":["blog",{"children":[["slug","aws-step-functions-a-practical-guide","d"],{"children":["__PAGE__?{\"slug\":\"aws-step-functions-a-practical-guide\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","aws-step-functions-a-practical-guide","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/31e337c2aa3be57f.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/01329c7d2530a3fe.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/a2429df6874052f9.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_d65c78","children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","flexDirection":"column","justifyContent":"center","alignItems":"center","height":"100vh","textAlign":"center","fontFamily":"Arial, sans-serif","backgroundColor":"#f9f9f9","color":"#333","padding":"0 20px"},"children":[["$","div",null,{"style":{"marginBottom":"20px","color":"#555"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","width":"150","height":"150","fill":"none","stroke":"currentColor","strokeWidth":"2","strokeLinecap":"round","strokeLinejoin":"round","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}]}],["$","h1",null,{"style":{"fontSize":"3rem","marginBottom":"10px"},"children":"404 - Page Not Found"}],["$","p",null,{"style":{"fontSize":"1.6rem","marginBottom":"20px"},"children":"Oops! The page you are looking for does not exist."}],["$","$L7",null,{"href":"/","style":{"fontSize":"1.4rem","color":"#0070f3","textDecoration":"none"},"children":"Return to Home"}]]}],"notFoundStyles":[]}],["$","$8",null,{"fallback":null,"children":["$","$L9",null,{"reason":"next/dynamic","children":["$","$La",null,{}]}]}],[["$","$Lb",null,{}],["$","$Lc",null,{}]]]}]}]],null],null],["$Ld",null]]]]
e:I[34027,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
10:I[93960,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
f:T3579,# AWS Step functions - A Practical Guide

In this tutorial, we'll explain what AWS Step Functions are, show you how they work, and guide you through some examples to help you understand and use them effectively. Let's get started on making your workflow easier with AWS Step Functions!

## What is AWS Step function

Services (AWS). It allows you to coordinate and automate the execution of multiple AWS services in response to various events or triggers. With Step Functions, you can build workflows, known as state machines, that define the sequence of steps or tasks to be executed, along with the conditions for transitioning between these steps.

Step Functions simplifies the process of managing complex workflows, making it easier to implement and maintain business logic, data processing pipelines, and other workflow-driven applications. It provides features such as error handling, retries, parallel execution, and task branching, enabling you to create robust and scalable applications without managing the underlying infrastructure.

Overall, AWS Step Functions is a powerful tool for building scalable, reliable, and event-driven applications, allowing you to focus on your business logic rather than the underlying infrastructure.

## What we will be building

We will build a simple document processing workflow, where we have a single endpoint of upload a file, and we will be sending the file to different places for processing depending on the file type.

Here is an illustration showing what we will be building:

![step function illustration](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708418925822_step-function-project-diagram.png)

**Prerequisite;**

Before diving in, you need to set up your AWS environment. This involves:

- **Creating an AWS Account and IAM Role**: If you don't already have an AWS account, sign up for one. Next,
-
- **Create Three 3 lambda functions**: We will need three lambda function, one for detecting the file type, another for processing the image, and the third one for processing document files. We can name these functions `check-image-or-document` , `process-image-demo`, and `process-document-demo` respectively.
- Create two S3 bucket where we will store the processed files, you can name them `process-image-demo-bck` and `process-document-demo-bck`.

> We will be using Python as the primary language for this demo.

Now, let populate our lambda functions with the code to process our image and document. Without making it too complicated, we will be resizing the image, and for the document, we will just store it directly to the s3 button.

I**nitial lambda function;**

So this will be the function in the workflow, that will detect the file type and pass the result into the rest of the workflow for processing.

```python

import json

def lambda_handler(event, context):
    # Get the uploaded file's information from the event
    bucket = event\['Records'\][0]\['s3'\]['bucket']['name']
    key = event\['Records'\][0]\['s3'\]['object']['key']

    # Extract the file extension from the key
    file_extension = key.split('.')[-1].lower()

    # List of image file extensions
    image_extensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp']

    # List of document file extensions
    document_extensions = ['doc', 'docx', 'pdf', 'txt', 'ppt', 'pptx', 'xls', 'xlsx']

    if file_extension in image_extensions:
        file_type = 'image'
    elif file_extension in document_extensions:
        file_type = 'document'
    else:
        file_type = 'unknown'

    response = {
        'statusCode': 200,
        'type': file_type,
        'fileInfo':{
            'bucket':bucket,
            'key':key

        }
    }

    return response

```

**Code for** `**process-image-demo**` **lambda function;**

You can populate the lambda function with the following code:

```python

import boto3
from PIL import Image
from io import BytesIO

def process_image(input_bucket, input_key, output_bucket, output_key, new_size=(300, 300)):
  """
  Processes an image stored in S3 by resizing it and converting it to grayscale.

  Parameters:
      input_bucket (str): The name of the input S3 bucket.
      input_key (str): The key of the input object in the input S3 bucket.
      output_bucket (str): The name of the output S3 bucket.
      output_key (str): The key of the output object in the output S3 bucket.
      new_size (tuple): A tuple representing the new size of the image (width, height).
  """
  # Initialize S3 client
  s3 = boto3.client('s3')

  # Download the input image from S3
  input_image_obj = s3.get_object(Bucket=input_bucket, Key=input_key)
  input_image_bytes = input_image_obj['Body'].read()
  input_image = Image.open(BytesIO(input_image_bytes))

  # Process the image
  processed_image = input_image.resize(new_size).convert('L')

  # Upload the processed image to S3
  output_image_buffer = BytesIO()
  processed_image.save(output_image_buffer, format='JPEG')
  output_image_buffer.seek(0)
  s3.put_object(Bucket=output_bucket, Key=output_key, Body=output_image_buffer)

def lambda_handler(event, context):
  """
  Lambda function handler.

  Parameters:
      event (dict): The event data passed to the Lambda function.
      context (object): The runtime information of the Lambda function.

  Returns:
      dict: The response indicating the completion of the function.
  """
  # Output S3 bucket where the processed image will be stored
  output_bucket = 'process-image-demo-bck'

  # Extract input S3 bucket and object key from the event
  input_s3_bucket = event\['fileInfo'\]['bucket']
  input_s3_object_key = event\['fileInfo'\]['key']

  # Use the same object key for output
  output_s3_object_key = input_s3_object_key

  # Process the image
  process_image(input_s3_bucket, input_s3_object_key, output_bucket, output_s3_object_key)

  # Return response
  response = {"finished": true, "filename":output_s3_object_key}
  return response
```

**Code for** `**process-document-demo**` **lambda function;**

You can populate the lambda function with the following code:

```python

import json

def lambda_handler(event, context):
  # TODO implement
  output_bucket = 'process-document-demo-bck'
  input_s3_bucket = event\['fileInfo'\]['bucket']
  input_s3_object_key = event\['fileInfo'\]['key']
  output_key = input_s3_object_key

  s3 = boto3.client('s3')

  s3.put_object(Bucket=output_bucket, Key=output_key, Body=output_image_buffer)

  response = {"finished": true, "filename": output_key}
  return response
```

Know that we have both functions ready, There are a few things we should clarify before moving forward.

- The `input-s3-bucket` and `input-s3-bucket-key` is getting it details from ` event[``'``fileinfo``'``] ` which is the output of our initial lambda function.
-

## Setting up our step function

Now that all of our functions are ready, let chain them together in a step function.

First, navigate to step functions and create a new state machine, you get a dialog that looks like this:

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708428565349_step-function-getting-started.png)

We will be using a blank template, click select to continue.

Second, Drag a lambda function into the workflow, and also provide the function name. In this case, we’re pointing it to our `check-image-or-document` lambda function.

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708429728440_function-name-step-function.png)

Next up, we will add a choice flow, which will determine the next function to trigger depending on the output from our `check-image-or-document`.

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708430684587_choice-step.png)

We can configure, our rules to check the value returned from the previous lambda function which is `check-image-or-document`. Since our function will be returning a string with either - `image`, `document` or `unknown`. We can easily check for that In the rule.

For Image (rule #1)

![](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708430733601_step-choice-rule-1.png)

For Documents (rule #2)

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708431160758_choice-rule-2.png)

Now, you can add the respective functions to the step and your workflow should look like this:

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708431293111_interim-step-function-workflow.png)

> Make sure to connect to their respective lambda functions.

The code for this looks like this:

```json
{
  "Comment": "A description of my state machine",
  "StartAt": "File upload",
  "States": {
    "File upload": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:276023487603:function:check-image-or-document:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.type",
          "StringEquals": "image",
          "Next": "Process image"
        },
        {
          "Variable": "$.type",
          "StringEquals": "document",
          "Next": "Process document"
        }
      ]
    },
    "Process image": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:276023487603:function:process-image-demo:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    },
    "Process document": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:us-east-1:276023487603:function:process-document-demo:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  }
}
```

Finally, you can hit the create button, to complete the state machine setup, and a dialog like this will show up:

![aws step function cloudplexo](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708452701167_confirm-step-function-role-creation.png)

Congratulations on completing our AWS Step Functions tutorial! You've now gained a solid understanding of how to use this powerful orchestration service to streamline and automate your workflows in the cloud. By mastering AWS Step Functions, you have unlocked the potential to build scalable, reliable, and efficient applications that respond dynamically to changing events and requirements.

You can test your workflow, with some test data, and you workflow output should look like this:

![](https://paper-attachments.dropboxusercontent.com/s_9CF67AC09B32B1F5EA25271CFF4EBFA36B82AA80A75D68B4EC53141DD6A36C45_1708497611994_step-function-final-output.png)

As you continue your journey with AWS, remember to explore the various features and integrations that Step Functions offers. Experiment with different workflow patterns, incorporate error handling and retries, and leverage the flexibility of state machines to create tailored solutions for your specific use cases.

We hope this tutorial has equipped you with the knowledge and confidence to leverage AWS Step Functions effectively in your projects. Remember, practice makes perfect, so don't hesitate to dive deeper into the documentation, explore additional resources, and continue learning and experimenting with AWS services.

Thank you for joining us on this learning adventure, and best of luck with your future endeavors in cloud computing and serverless application development!

**Happy orchestrating!**

**Continue Reading**:

[Top Cloud Services providers in Nigeria with CloudPlexo's Innovative Solutions](https://cloudplexo.com/)

[How to Deploy and Host Your Web App on AWS Amplify](https://cloudplexo.com/how-to-deploy-and-host-your-web-app-on-aws-amplify)

[Uploading Large Files Upto 5TB to Amazon S3 using Boto3 in Python](https://cloudplexo.com/uploading-large-files-upto-5tb-to-amazon-s3-using-boto3-in-python)
2:["$","$Le",null,{"blog":{"content":"$f","date":"2024-02-21","published":false,"updated":"12/2/2024","slug":"aws-step-functions-a-practical-guide","description":" It allows you to coordinate and automate the execution of multiple AWS services in response to various events or triggers. With Step Functions, you can build workflows, known as state machines, that define the sequence of steps or tasks to be executed, along with the conditions for transitioning between these steps.\n","key":"aws-step-functions-a-practical-guide","thumbnail":"https://cloudplexo-cms-bucket.s3.af-south-1.amazonaws.com/blog/aws-step-functions-a-practical-guide/1733119362867-aws-step-functions-thumbnail.png","author":"abdulmumin yaqeen","title":"AWS Step functions - A Practical Guide"},"oldBlog":{"comp":["$","$L10",null,{}],"url":"aws-step-functions-a-practical-guide"}}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"AWS Step functions - A Practical Guide - CloudPlexo Blog"}],["$","meta","3",{"name":"description","content":"In this tutorial, we'll explain what AWS Step Functions are, show you how they work, and guide you through some examples to help you understand and use them effectively. Let's get started on making your workflow easier with AWS Step Functions!"}],["$","meta","4",{"name":"keywords","content":"aws-step-functions-a-practical-guide,Cloud Computing Insights,AWS Blog,Azure Articles,Google Cloud Updates,Cloud Technology Trends"}],["$","link","5",{"rel":"canonical","href":"https://www.cloudplexo.com/blog/aws-step-functions-a-practical-guide/"}],["$","link","6",{"rel":"icon","href":"/icon.ico?7156ce2ac441bdbe","type":"image/x-icon","sizes":"16x16"}],["$","meta","7",{"name":"next-size-adjust"}]]
1:null
