3:I[4707,[],""]
5:I[36423,[],""]
6:I[83575,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
7:I[72972,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],""]
8:"$Sreact.suspense"
9:I[81523,["6051","static/chunks/795d4814-476d6416c8e2052d.js","1779","static/chunks/0e762574-e2250de400a4ed4b.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","3705","static/chunks/3705-b8fe6f5208fe399e.js","3978","static/chunks/3978-b267f049d115c2b8.js","1110","static/chunks/1110-de266bf53394e4db.js","1055","static/chunks/1055-c276cbff28cfad9a.js","4606","static/chunks/4606-20a0c42850a47167.js","2403","static/chunks/2403-4383a29793ac9144.js","3839","static/chunks/3839-050ccec6cac83fe9.js","1931","static/chunks/app/page-c8486484b9037db3.js"],"BailoutToCSR"]
a:I[7237,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
b:I[22207,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
c:I[75549,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
4:["slug","advanced-document-processing-with-aws-textract","d"]
0:["uEu_oHx93E1n1djLkNdZ9",[[["",{"children":["blog",{"children":[["slug","advanced-document-processing-with-aws-textract","d"],{"children":["__PAGE__?{\"slug\":\"advanced-document-processing-with-aws-textract\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","advanced-document-processing-with-aws-textract","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/31e337c2aa3be57f.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/01329c7d2530a3fe.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/a2429df6874052f9.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_d65c78","children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","flexDirection":"column","justifyContent":"center","alignItems":"center","height":"100vh","textAlign":"center","fontFamily":"Arial, sans-serif","backgroundColor":"#f9f9f9","color":"#333","padding":"0 20px"},"children":[["$","div",null,{"style":{"marginBottom":"20px","color":"#555"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","width":"150","height":"150","fill":"none","stroke":"currentColor","strokeWidth":"2","strokeLinecap":"round","strokeLinejoin":"round","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}]}],["$","h1",null,{"style":{"fontSize":"3rem","marginBottom":"10px"},"children":"404 - Page Not Found"}],["$","p",null,{"style":{"fontSize":"1.6rem","marginBottom":"20px"},"children":"Oops! The page you are looking for does not exist."}],["$","$L7",null,{"href":"/","style":{"fontSize":"1.4rem","color":"#0070f3","textDecoration":"none"},"children":"Return to Home"}]]}],"notFoundStyles":[]}],["$","$8",null,{"fallback":null,"children":["$","$L9",null,{"reason":"next/dynamic","children":["$","$La",null,{}]}]}],[["$","$Lb",null,{}],["$","$Lc",null,{}]]]}]}]],null],null],["$Ld",null]]]]
e:I[34027,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
10:I[40574,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
f:T2633,In today's digital world, businesses and organizations deal with an ever-increasing volume of documents, ranging from invoices and contracts to forms and reports. Extracting structured data from these documents manually can be time-consuming, error-prone, and inefficient.

This is where AWS Textract, a service provided by Amazon Web Services (AWS), comes into play. AWS Textract leverages machine learning to automatically recognize and extract text, forms, tables, and other valuable data from a variety of document types.

In this article, we will explore how to perform advanced document processing with AWS Textract and unlock the potential of automated data extraction. In specific, we will be analyzing documents to extract forms and form data.

### **Setting up Your Environment**

Before diving in, you need to set up your AWS environment. This involves:

1. **Creating an AWS Account and IAM Role**: If you don't already have an AWS account, sign up for one. Next, create a lambda function and update the role with the necessary permissions to use Textract. The role should have policies like AmazonTextractFullAccess or custom policies with the required permissions.  
2. **Creating an S3 Bucket**: You'll need to store the documents you want to process in an Amazon S3 bucket. Textract will analyze documents from this bucket.

### **Starting a Textract Job**

Now that your environment is set up, it's time to start processing documents with Textract. Here are the steps involved:

1. **Choose the Documents**: Decide which documents you want to process and upload them to your S3 bucket.  
2. **Start a Textract Job**: You can use either the AWS SDK or AWS CLI to start a Textract job. Specify the S3 bucket and the document(s) you want to process. Textract supports various document formats, including PDF, image files (JPEG, PNG), and more. In our case, we will be using the SDK in a Lambda function.

From this moment onward, we will be writing a lot of code, but most of it is reusable and it can be copied over to any Textract project.

```python
import boto3
import sys
import re
import json
from collections import defaultdict

def load_image():
    s3_bucket = "textract-images-bucket-2"
    s3_key = "dummy_id.jpeg"
    # process using image bytes

    textract = boto3.client('textract', region_name='us-east-1')
    response = textract.analyze_document(
              Document={'S3Object': {'Bucket': s3_bucket, 'Name': s3_key}}
, FeatureTypes=['FORMS'])

    return response
```

So this is the first thing we are doing, loading our test image from an s3 bucket.

Everything here is very basic though, in the Textract API the analyse\_document function, we pass two arguments:

1. Document={'S3Object': {'Bucket': s3\_bucket, 'Name': s3\_key}}, This is for the location of the document we will be processing  
2. FeatureTypes=\['FORMS'\], This argument specifies the type of data we are looking for in this document. Which is forms.

If you were to call this function in your lambda\_handler, you would be able to see the result, but in a super cluttered way.

The series of functions we will be writing next will be just to declutter the result. As said earlier, these functions will be reusable across all of your Textract projects. It will only be invalid if AWS Textract decides to change the syntax of the response you get.

```python
def get_kv_map(file_name):

    response = load_image()
    # Get the text blocks
    blocks = response['Blocks']

    # get key and value maps
    key_map = {}
    value_map = {}
    block_map = {}
    for block in blocks:
        block_id = block['Id']
        block_map[block_id] = block
        if block['BlockType'] == "KEY_VALUE_SET":
            if 'KEY' in block['EntityTypes']:
                key_map[block_id] = block
            else:
                value_map[block_id] = block

    return key_map, value_map, block_map
```

In simple terms, this function organizes the information extracted from the document using Textract into three separate collections. These collections are like folders:

1. key\_map: It's a folder for blocks that contain keys or labels. For example, if the document has labels like "Name" or "Date," those blocks are placed here.  
2. value\_map: This folder holds blocks that contain values associated with the keys. If, for instance, you have corresponding data like "John Doe" or "2023-09-25," these blocks are stored here.  
3. block\_map: Think of this as a general folder where all the extracted blocks are stored. It includes both key and value blocks, as well as any other type of block found in the document.

Why is this helpful? Well, it makes it easier to work with the extracted data, especially when you're dealing with documents structured as key-value pairs. You can quickly find and use the keys and their associated values, thanks to this organization.

```python
def get_kv_relationship(key_map, value_map, block_map):
    kvs = defaultdict(list)
    for block_id, key_block in key_map.items():
        value_block = find_value_block(key_block, value_map)
        key = get_text(key_block, block_map)
        val = get_text(value_block, block_map)
        kvs[key].append(val)
    return kvs

def find_value_block(key_block, value_map):
    for relationship in key_block['Relationships']:
        if relationship['Type'] == 'VALUE':
            for value_id in relationship['Ids']:
                value_block = value_map[value_id]
    return value_block


def get_text(result, blocks_map):
    text = ''
    if 'Relationships' in result:
        for relationship in result['Relationships']:
            if relationship['Type'] == 'CHILD':
                for child_id in relationship['Ids']:
                    word = blocks_map[child_id]
                    if word['BlockType'] == 'WORD':
                        text += word['Text'] + ' '
                    if word['BlockType'] == 'SELECTION_ELEMENT':
                        if word['SelectionStatus'] == 'SELECTED':
                            text += 'X '

    return text
```

Here's a step-by-step explanation:

1. **Initialization**: The function initializes an empty dictionary called kvs. This dictionary will be used to establish relationships between key-value pairs. It uses defaultdict(list) to ensure that each key in kvs maps to a list, allowing multiple values to be associated with a single key.  
2. **Looping Through Key Blocks**: The function iterates through each key block in the key\_map dictionary. Each key block represents a label or identifier.  
3. **Finding Corresponding Value Block**: For each key block, it calls a function named find\_value\_block(key\_block, value\_map) to locate the corresponding value block in the value\_map. This function is assumed to find and return the value block associated with the given key block.  
4. **Extracting Key and Value Text**: After identifying the key and value blocks, the function extracts the text content from these blocks using a function called get\_text(key\_block, block\_map) and get\_text(value\_block, block\_map). The block\_map is used to locate the blocks within all the blocks extracted from the document.  
5. **Creating Relationships**: The extracted key and value texts are used to establish relationships within the kvs dictionary. Specifically, it appends the value (val) to the list associated with the key (key) in the kvs dictionary.  
6. **Return**: Finally, the function returns the kvs dictionary, which now contains key-value relationships. Each key in the dictionary corresponds to a label or key block, and its associated value is a list containing one or more values extracted from value blocks associated with that key.

In essence, this function builds upon the initial categorization of key and value blocks to create structured relationships between them. It's particularly useful when processing documents that contain multiple key-value pairs, enabling easy access to the associated values for each key.

Finally, we will use all of these functions in our main function/lambda\_handler function.

```python
def print_kvs(kvs):
    for key, value in kvs.items():
        print(key, ":", value)

def lambda_handler(file_name):
    key_map, value_map, block_map = get_kv_map(file_name)

    # Get Key Value relationship
    kvs = get_kv_relationship(key_map, value_map, block_map)
    print("\n\n== FOUND KEY : VALUE pairs ===\n")
    print_kvs(kvs)
```

For this demo, we are only printing the result to the console, but you will want to return that as a JSON or write that somewhere, Depending on your use case or how you architect your workflow.

## **Testing**

In my s3, I have uploaded a sample ID card image, which looks like this 👇🏾

![image1](https://cloudplexo-cms-bucket.s3.af-south-1.amazonaws.com/blog/custom-uploads/images/dummy_id.jpeg)

After testing, the result looks something like this.

```plaintext
== FOUND KEY : VALUE pairs ===

ISSUE DATE  : ['28 AUG 14 ']
DATE of BIRTH  : ['01 OCT 60 ']
HEIGHT  : ['26cm ']
SEX  : ['M ']
MIDDLE NAME  : ['CITIZEN ']
EXPIRY  : ['01/19 ']
MENT NUMBER  : ['4812640614 ']
FIRST NAME  : ['NIGERIAN ']
SURNAME  : ['PROUD ']
NATIONALITY  : ['NGA ']
My  : ['Signature ']
```

And this is such an accurate result, the form data was detected and extracted from this image.

NOTE: The entire document processing was done by the initial function we wrote, which uses Textract API. Every other subsequent function is used to format the response for better results and further processing if needed.

That's it\! You've learned to use AWS Textract for document processing. You can leverage the full potential of Textract to perform advanced document processing and automation in your applications or business processes.

**Happy Coding\!**

2:["$","$Le",null,{"blog":{"content":"$f","date":"2023-09-25","published":false,"updated":"12/2/2024","slug":"advanced-document-processing-with-aws-textract","description":"AWS Textract leverages machine learning to automatically recognize and extract text, forms, tables, and other valuable data from a variety of document types. In this article, we will explore how to perform advanced document processing with AWS Textract and unlock the potential of automated data extraction\n","key":"advanced-document-processing-with-aws-textract","thumbnail":"https://cloudplexo-cms-bucket.s3.af-south-1.amazonaws.com/blog/advanced-document-processing-with-aws-textract/1733068125478-aws-textract-thumbnail.png","author":"abdulmumin yaqeen","title":"Advanced document processing with AWS Textract"},"oldBlog":{"comp":["$","$L10",null,{}],"url":"advanced-document-processing-with-aws-textract"}}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Advanced Document Processing with AWS Textract - CloudPlexo Blog"}],["$","meta","3",{"name":"description","content":"In today's digital world, businesses and organizations deal with an ever-increasing volume of documents, ranging from invoices and contracts to forms and reports. Extracting structured data from these documents manually can be time-consuming, error-prone, and inefficient."}],["$","meta","4",{"name":"keywords","content":"advanced-document-processing-with-aws-textract,Cloud Computing Insights,AWS Blog,Azure Articles,Google Cloud Updates,Cloud Technology Trends"}],["$","link","5",{"rel":"canonical","href":"https://www.cloudplexo.com/blog/advanced-document-processing-with-aws-textract/"}],["$","link","6",{"rel":"icon","href":"/icon.ico?7156ce2ac441bdbe","type":"image/x-icon","sizes":"16x16"}],["$","meta","7",{"name":"next-size-adjust"}]]
1:null
