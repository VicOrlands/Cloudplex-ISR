3:I[4707,[],""]
5:I[36423,[],""]
6:I[83575,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
7:I[72972,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],""]
8:"$Sreact.suspense"
9:I[81523,["6051","static/chunks/795d4814-476d6416c8e2052d.js","1779","static/chunks/0e762574-e2250de400a4ed4b.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","3705","static/chunks/3705-b8fe6f5208fe399e.js","3978","static/chunks/3978-b267f049d115c2b8.js","1110","static/chunks/1110-de266bf53394e4db.js","1055","static/chunks/1055-c276cbff28cfad9a.js","4606","static/chunks/4606-20a0c42850a47167.js","2403","static/chunks/2403-4383a29793ac9144.js","3839","static/chunks/3839-050ccec6cac83fe9.js","1931","static/chunks/app/page-c8486484b9037db3.js"],"BailoutToCSR"]
a:I[7237,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
b:I[22207,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
c:I[75549,["1779","static/chunks/0e762574-e2250de400a4ed4b.js","5452","static/chunks/5e22fd23-548660fd7966a330.js","5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","3464","static/chunks/3464-108d3965859ff6f4.js","7261","static/chunks/7261-55c1cedd72bd6eaa.js","8003","static/chunks/8003-22382164f812e9a5.js","3185","static/chunks/app/layout-07248a66e26d07dc.js"],"default"]
4:["slug","getting-started-with-dynamodb-a-practical-approach","d"]
0:["uEu_oHx93E1n1djLkNdZ9",[[["",{"children":["blog",{"children":[["slug","getting-started-with-dynamodb-a-practical-approach","d"],{"children":["__PAGE__?{\"slug\":\"getting-started-with-dynamodb-a-practical-approach\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","getting-started-with-dynamodb-a-practical-approach","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/31e337c2aa3be57f.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/01329c7d2530a3fe.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/a2429df6874052f9.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_d65c78","children":["$","body",null,{"children":[["$","$L6",null,{}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","div",null,{"style":{"display":"flex","flexDirection":"column","justifyContent":"center","alignItems":"center","height":"100vh","textAlign":"center","fontFamily":"Arial, sans-serif","backgroundColor":"#f9f9f9","color":"#333","padding":"0 20px"},"children":[["$","div",null,{"style":{"marginBottom":"20px","color":"#555"},"children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","viewBox":"0 0 24 24","width":"150","height":"150","fill":"none","stroke":"currentColor","strokeWidth":"2","strokeLinecap":"round","strokeLinejoin":"round","children":[["$","circle",null,{"cx":"12","cy":"12","r":"10"}],["$","line",null,{"x1":"15","y1":"9","x2":"9","y2":"15"}],["$","line",null,{"x1":"9","y1":"9","x2":"15","y2":"15"}]]}]}],["$","h1",null,{"style":{"fontSize":"3rem","marginBottom":"10px"},"children":"404 - Page Not Found"}],["$","p",null,{"style":{"fontSize":"1.6rem","marginBottom":"20px"},"children":"Oops! The page you are looking for does not exist."}],["$","$L7",null,{"href":"/","style":{"fontSize":"1.4rem","color":"#0070f3","textDecoration":"none"},"children":"Return to Home"}]]}],"notFoundStyles":[]}],["$","$8",null,{"fallback":null,"children":["$","$L9",null,{"reason":"next/dynamic","children":["$","$La",null,{}]}]}],[["$","$Lb",null,{}],["$","$Lc",null,{}]]]}]}]],null],null],["$Ld",null]]]]
e:I[34027,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
10:I[12051,["5878","static/chunks/5878-5874fb2c0dc2a1fa.js","2972","static/chunks/2972-ec2c5667a187e8c4.js","6434","static/chunks/6434-f1ba83ef6f4d8ff1.js","5915","static/chunks/5915-0201d1e543d87633.js","3486","static/chunks/3486-31c46a73f5eb8de6.js","273","static/chunks/273-4de1aefaf8cd17ce.js","308","static/chunks/app/blog/%5Bslug%5D/page-e7b2d01086a187e4.js"],"default"]
f:T2998,# Getting Started with DynamoDB - A Practical Approach

## What is DynamoDB?

AWS DynamoDB is a managed NoSQL database that is optimized for performance at scale. It's designed for high availability and to handle massive amounts of data.

DynamoDB being managed means that there is no need to manage the hardware, security patches and other related issues. Everything under the hood is nothing you need to care about.

One of DynamoDB's key features is its ability to automatically replicate data across multiple availability zones within a region, ensuring high availability and fault tolerance. It also offers flexible data modeling capabilities, allowing users to store structured, semi-structured, or unstructured data without the need for complex schema management.

DynamoDB is optimized for both read and write throughput, making it well-suited for use cases such as gaming, ad tech, IoT, mobile apps, and real-time analytics. Its performance is backed by SSD storage and a distributed architecture that can handle millions of requests per second.

With DynamoDB, you can benefit from features like encryption at rest, fine-grained access control using AWS Identity and Access Management (IAM), and integration with other AWS services such as AWS Lambda for serverless computing and Amazon Redshift for data warehousing.

## Core concepts:

- **Tables:**  A table is a collection of items.
  
  ![Fields in the Customers, Invoices, Line Items, and Products tables](https://help.claris.com/archive/help/13/fmp/en/images/create_db.8.2.1.png)

- **Items:** A collection of Attributes, or key/ value paris.
  
  ![Match fields in the Customers, Invoices, Line Items, and Products tables](https://help.claris.com/archive/help/13/fmp/en/images/create_db.8.2.2.png)

- **Access Pattern:**

An access pattern refers to the specific way in which data is queried or retrieved from the database. Access patterns are crucial for designing efficient DynamoDB tables and optimizing performance for different types of queries.
Since DynamoDB is a NoSQL database, it doesn't support complex join operations like traditional relational databases. Instead, it relies on data modeling techniques that are tailored to the specific access patterns of an application.

**Common access patterns in DynamoDB include**:

1. Single-item retrieval: Fetching a single item from the database using its primary key.
2. Querying by a specific attribute: Retrieving multiple items that match a certain attribute value.
3. Scan operations: Scanning through the entire table to find items that meet certain criteria.
4. Secondary indexes: Creating secondary indexes to support queries based on attributes other than the primary key.
5. Sparse indexes: Using sparse indexes to efficiently query for items where certain attributes may not exist.
6. Time-series data: Storing time-series data and querying based on timestamps or date ranges.

Understanding the access patterns of an application is crucial for designing efficient table structures, choosing appropriate primary keys, and creating secondary indexes if needed. By optimizing access patterns, developers can ensure that DynamoDB tables perform well and scale effectively as the application grows.

## Getting Started

We can jump to our AWS console, search and navigate to DynamoDB.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709631394763_Screenshot+from+2024-03-05+10-35-25.png)

> Keep in mind that every table we create is region specific.

We can now create a table.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709632108247_create-table-dynamo.png)

Currently, we named the table “**Products**” and Partition key “**productID**”. we won’t be needing sort key, as our partition key will be unique.

> A partition key is a primary key attribute that uniquely identifies each item in a DynamoDB table.

You can click on the Customize settings to view more options.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709632518355_Screenshot+from+2024-03-05+10-54-40.png)

You can also turn on/off autoscaling, which will give you a dynamic or fixed capacity units.

With autoscaling enabled, DynamoDB continuously monitors your table's capacity utilization and adjusts provisioned capacity up or down as needed to maintain utilization at or close to your target value. This allows you to optimize cost by automatically scaling down capacity during periods of low traffic and scaling up during periods of high traffic, without the need for manual adjustments.

Autoscaling in DynamoDB can be configured to operate within specified minimum and maximum capacity limits, providing flexibility and control over resource allocation based on your application's requirements. It's a valuable feature for maintaining performance and cost efficiency in dynamic workloads.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709632803219_readwriteCapacityDynamodb.png)

Finally, you can use the create button.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709633051040_create-table-button-dynamodb.png)

The table takes a couple moments to create, and when it done, you can have a dashboard like this:

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709633301061_Screenshot+from+2024-03-05+11-07-22.png)

As mentioned earlier, DynamoDB tables are region specific, so the idea of global table create a replica of your table in other regions so users can access if faster.

> Keep in mind you will be paying more for storage, and other resources provisioned.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709633507027_globalTable-idea.png)

To populate our table, you can use the “Explore table items” button.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709635739694_expore-table-items-button.png)

**Creating items;**

You can use the form in the console, or JSON, or using the API. 

**Form console:**

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709636369467_form-item-create-dynamodb.png)

JSON view:

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709636453122_json-view-items-dynamodb.png)

You can see in the JSON, we have the syntax as follows:

**attribute_name: {"attribute_type": "attribute_value"}**

In DynamoDB, the following attribute types are available:

1. **String (S)**: This type represents a Unicode string. The maximum length for a string attribute value is 400 KB.
2. **Number (N)**: This type represents a numeric value. Numbers can be positive, negative, or zero. Numbers are Unicode with a variable length, meaning that the maximum length of a number is constrained by the maximum item size limit. However, the number type itself doesn't have a specific size limit.
3. **Binary (B)**: This type represents a binary data (byte array). Binary attributes are useful for storing non-Unicode text, images, compressed data, and other types of binary data. The maximum size for a binary attribute value is 400 KB.
4. **Boolean (BOOL)**: This type represents a Boolean value, either true or false.
5. **Null (NULL)**: This type represents a null value.
6. **String Set (SS)**: This type represents a set of string values. Each string set can have multiple string values, but each value must be unique within the set. The maximum size for a string set is 400 KB.
7. **Number Set (NS)**: This type represents a set of numeric values. Each number set can have multiple numeric values, but each value must be unique within the set. The maximum size for a number set is 400 KB.
8. **Binary Set (BS)**: This type represents a set of binary values (byte arrays). Each binary set can have multiple binary values, but each value must be unique within the set. The maximum size for a binary set is 400 KB.
9. **List (L)**: This type represents a list of attribute values. Lists can contain multiple values of different data types, but the maximum size for a list is 400 KB.
10. **Map (M)**: This type represents a collection of attribute name-value pairs. Attribute values can be of any data type, including nested maps and lists. The maximum size for a map is 400 KB.

Our first Item on DynamoDB is inserted.

![](https://paper-attachments.dropboxusercontent.com/s_DD3035CA8188185A08A5201DB2AC59D8C22E6D5633F09C2B267D096F54F323E2_1709636712463_dynamo-db-first-item-created.png)

### Programmatically creating Items;

Using Python and Boto3:

**Import Boto3 and Initialize DynamoDB Client**: Import the Boto3 library and initialize the DynamoDB client.

```python
import boto3

# Initialize DynamoDB client
dynamodb = boto3.client('dynamodb')
```

**Creating an Item**: Use the `put_item` method to insert an item into a DynamoDB table.

```python
item = {
  "productID": {
    "S": "1"
  },
  "name": {
    "S": "Example Product"
  },
  "price": {
    "N": "99.99"
  }
}

response = dynamodb.put_item(
    TableName='Products',
    Item=item
)

print("Item created successfully:", response)
```

**Conclusion:**

In this tutorial, we explored the fundamentals of working with Amazon DynamoDB, a fully managed NoSQL database service provided by AWS. DynamoDB offers high scalability, reliability, and low-latency performance, making it an ideal choice for a wide range of applications, from small-scale projects to large-scale enterprise solutions.

We covered various aspects of DynamoDB, including table creation, primary key design, querying data, and inserting items programmatically. Understanding the importance of partition keys and sort keys in table design is crucial for optimizing query performance and distributing workload evenly across partitions.

**Continue Reading:**

[Top Cloud Services providers in Nigeria with CloudPlexo's Innovative Solutions](https://cloudplexo.com)

[Step-by-Step Guide: Building a Basic Web Application on AWS](https://cloudplexo.com/building-a-basic-web-application-on-aws)

[Introduction to AWS CLI: Basic Commands for Beginners](https://cloudplexo.com/introduction-to-aws-cli-basic-commands-for-beginners)
2:["$","$Le",null,{"blog":{"content":"$f","date":"2024-03-06","published":false,"updated":"12/2/2024","slug":"getting-started-with-dynamodb-a-practical-approach","description":"One of DynamoDB's key features is its ability to automatically replicate data across multiple availability zones within a region, ensuring high availability and fault tolerance. It also offers flexible data modeling capabilities, allowing users to store structured, semi-structured, or unstructured data without the need for complex schema management.\n","key":"getting-started-with-dynamodb-a-practical-approach","thumbnail":"https://cloudplexo-cms-bucket.s3.af-south-1.amazonaws.com/blog/getting-started-with-dynamodb-a-practical-approach/1733119678448-aws-dynamodb-thubmnail.png","author":"abdulmumin yaqeen","title":"Getting Started with DynamoDB - A Practical Approach"},"oldBlog":{"comp":["$","$L10",null,{}],"url":"getting-started-with-dynamodb-a-practical-approach"}}]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Getting Started with DynamoDB - A Practical Approach - CloudPlexo Blog"}],["$","meta","3",{"name":"description","content":"AWS DynamoDB is a managed NoSQL database that is optimized for performance at scale. With DynamoDB, you can benefit from features like encryption at rest, fine-grained access control using AWS Identity and Access Management (IAM), e.t.c."}],["$","meta","4",{"name":"keywords","content":"getting-started-with-dynamodb-a-practical-approach,Cloud Computing Insights,AWS Blog,Azure Articles,Google Cloud Updates,Cloud Technology Trends"}],["$","link","5",{"rel":"canonical","href":"https://www.cloudplexo.com/blog/getting-started-with-dynamodb-a-practical-approach/"}],["$","link","6",{"rel":"icon","href":"/icon.ico?7156ce2ac441bdbe","type":"image/x-icon","sizes":"16x16"}],["$","meta","7",{"name":"next-size-adjust"}]]
1:null
